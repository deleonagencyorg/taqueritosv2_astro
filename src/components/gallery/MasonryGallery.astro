---
import LazyImage from '../common/LazyImage.astro';

export interface GalleryItem {
  url: string;
  alt?: string;
}

export interface Props {
  items: GalleryItem[];
  columns?: number; // desktop columns
  title?: string;
  className?: string;
}

const {
  items = [],
  columns = 3,
  title = '',
  className = ''
} = Astro.props as Props;
---

<section class={`w-full ${className}`}> 
  

  <div class="gallery-viewport">
    <div class="masonry" style={`--cols: ${columns}; --gap: 1rem;`}>
      {items.map((item, idx) => (
        <div class="masonry-item">
          <button class="block w-full text-left focus:outline-none" data-index={idx} aria-label={item.alt || 'Abrir imagen'}>
            <LazyImage src={item.url} alt={item.alt || ''} class="w-full h-auto rounded-lg block" />
          </button>
        </div>
      ))}
    </div>
  </div>

  <!-- Modal Slider -->
  <div id="gallery-modal" class="fixed inset-0 z-50 hidden items-center justify-center bg-black/80 p-4">
    <div class="relative w-full max-w-5xl">
      <!-- Close -->
      <button id="gallery-close" class="absolute -top-2 -right-2 md:top-0 md:right-0 bg-white/90 hover:bg-white text-black rounded-full w-9 h-9 flex items-center justify-center shadow" aria-label="Cerrar">
        ✕
      </button>
      <!-- Prev -->
      <button id="gallery-prev" class="absolute left-2 top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white text-black rounded-full w-10 h-10 flex items-center justify-center shadow" aria-label="Anterior">
        ‹
      </button>
      <!-- Next -->
      <button id="gallery-next" class="absolute right-2 top-1/2 -translate-y-1/2 bg-white/80 hover:bg-white text-black rounded-full w-10 h-10 flex items-center justify-center shadow" aria-label="Siguiente">
        ›
      </button>
      <!-- Image -->
      <div class="bg-transparent rounded-lg overflow-hidden">
        <img id="gallery-image" alt="" class="mx-auto max-h-[80vh] w-auto rounded-lg shadow-lg" />
        <p id="gallery-caption" class="mt-3 text-center text-white/90 text-sm"></p>
      </div>
    </div>
  </div>
</section>

<style>
  /* Fixed viewport with overflow hidden */
  .gallery-viewport {
    height: 400px; /* mobile */
    overflow: hidden;
  }
  @media (min-width: 768px) {
    .gallery-viewport { height: 500px; }
  }
  @media (min-width: 1024px) {
    .gallery-viewport { height: 800px; }
  }

  .masonry {
    column-count: 1;
    column-gap: var(--gap, 1rem);
  }
  .masonry-item {
    break-inside: avoid;
    -webkit-column-break-inside: avoid;
    margin-bottom: var(--gap, 1rem);
    transition: opacity 300ms ease; /* smooth fade */
  }
  .fade-out { opacity: 0; }
  .fade-in { opacity: 1; }

  @media (min-width: 768px) {
    .masonry { column-count: var(--cols, 3); }
  }

  /* Reduce motion preference */
  @media (prefers-reduced-motion: reduce) {
    .masonry-item { transition: none; }
  }
</style>

<script is:inline>
  (() => {
    const section = document.currentScript?.closest('section');
    const grid = section?.querySelector('.masonry');
    if (!grid) return;

    const modal = document.getElementById('gallery-modal');
    const imgEl = document.getElementById('gallery-image');
    const capEl = document.getElementById('gallery-caption');
    const btnClose = document.getElementById('gallery-close');
    const btnPrev = document.getElementById('gallery-prev');
    const btnNext = document.getElementById('gallery-next');

    const thumbs = Array.from(grid.querySelectorAll('img'));
    const data = thumbs.map((img) => ({ url: img.currentSrc || img.src, alt: img.alt || '' }));
    let index = 0;
    let open = false;

    function show(i) {
      if (!imgEl) return;
      index = (i + data.length) % data.length;
      const item = data[index];
      imgEl.src = item.url;
      imgEl.alt = item.alt || '';
      if (capEl) capEl.textContent = item.alt || '';
    }

    function onOpen(i) {
      if (!modal) return;
      open = true;
      modal.classList.remove('hidden');
      document.body.style.overflow = 'hidden';
      show(i);
    }

    function onClose() {
      if (!modal) return;
      open = false;
      modal.classList.add('hidden');
      document.body.style.overflow = '';
    }

    function onPrev() { show(index - 1); }
    function onNext() { show(index + 1); }

    // Click handlers on thumbnails
    grid.addEventListener('click', (e) => {
      const btn = (e.target instanceof Element) ? e.target.closest('button[data-index]') : null;
      if (!btn) return;
      const i = Number((btn as HTMLButtonElement).dataset.index || 0);
      onOpen(i);
    });

    // Controls
    btnClose?.addEventListener('click', onClose);
    btnPrev?.addEventListener('click', onPrev);
    btnNext?.addEventListener('click', onNext);

    // Close when clicking backdrop (outside content)
    modal?.addEventListener('click', (e) => {
      if (e.target === modal) onClose();
    });

    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (!open) return;
      if (e.key === 'Escape') onClose();
      else if (e.key === 'ArrowLeft') onPrev();
      else if (e.key === 'ArrowRight') onNext();
    });

    // Auto-rotation at start with smooth animation
    const reduceMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    const ROTATE_MS = 4000;
    let rotateTimer: number | null = null;

    function cycleOnce() {
      const firstItem = grid.querySelector('.masonry-item');
      if (!firstItem) return;
      firstItem.classList.add('fade-out');
      // After fade-out, move to end and fade-in
      setTimeout(() => {
        firstItem.classList.remove('fade-out');
        grid.appendChild(firstItem);
        firstItem.classList.add('fade-in');
        // Ensure fade-in effect ends
        setTimeout(() => firstItem.classList.remove('fade-in'), 300);
      }, 300);
    }

    if (!reduceMotion) {
      // Kick off a first gentle rotation shortly after load
      setTimeout(cycleOnce, 800);
      rotateTimer = window.setInterval(cycleOnce, ROTATE_MS);
    }

    // Pause rotation when page/tab is hidden
    document.addEventListener('visibilitychange', () => {
      if (reduceMotion) return;
      if (document.hidden) {
        if (rotateTimer) { clearInterval(rotateTimer); rotateTimer = null; }
      } else if (!rotateTimer) {
        rotateTimer = window.setInterval(cycleOnce, ROTATE_MS);
      }
    });

    // Stop rotation when user opens modal (to avoid distraction)
    function pauseRotation() {
      if (rotateTimer) { clearInterval(rotateTimer); rotateTimer = null; }
    }
    function resumeRotation() {
      if (!reduceMotion && !rotateTimer) rotateTimer = window.setInterval(cycleOnce, ROTATE_MS);
    }
    btnClose?.addEventListener('click', () => { resumeRotation(); });
    // Opening modal via thumbs pauses rotation
    grid.addEventListener('click', (e) => {
      const btn = (e.target instanceof Element) ? e.target.closest('button[data-index]') : null;
      if (btn) pauseRotation();
    });
  })();
</script>
