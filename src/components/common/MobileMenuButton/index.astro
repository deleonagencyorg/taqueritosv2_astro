---
import { t, type Locale } from '../../../i18n/i18n';
import type { HeaderColorConfig } from '../../../config/headerColors';

export interface Props {
  currentLang: Locale;
  headerColorConfig?: HeaderColorConfig;
}

const { currentLang, headerColorConfig } = Astro.props;

// Traducciones
const openMenuLabel = t('menu_labels.open_main_menu', { namespace: 'common', locale: currentLang }) || 'Open main menu';

// SVG Icons
const menuIconSvg = `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
</svg>`;

const closeIconSvg = `<svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
</svg>`;

// Usar colores por defecto si no se proporciona configuración
const textColor = headerColorConfig?.textColor || 'text-white';
const hoverTextColor = headerColorConfig?.hoverTextColor || 'hover:text-gray-300';
const hoverBackgroundColor = headerColorConfig?.hoverBackgroundColor || 'hover:bg-blue-800';
---

<!-- Mobile Menu Button (visible up to md, hidden on lg and up) -->
<div class="lg:hidden">
  <button
    id="mobile-menu-button"
    type="button"
    class={`inline-flex items-center justify-center p-2 rounded-md ${textColor} ${hoverTextColor} ${hoverBackgroundColor} focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white`}
    aria-expanded="false"
    aria-label={openMenuLabel}
  >
    <span class="sr-only">{openMenuLabel}</span>
    <div id="menu-icon-container" class="w-8 h-8 flex items-center justify-center" set:html={menuIconSvg}></div>
  </button>
</div>

<script define:vars={{ astroMenuIconSvg: menuIconSvg, astroCloseIconSvg: closeIconSvg }}>
// Función para manejar el clic en el botón del menú móvil
function handleMobileMenuButtonClick(event) {
  const menuButton = event.currentTarget;
  const menuIconContainer = document.getElementById('menu-icon-container');
  const mobileMenu = document.getElementById('mobile-menu');
  
  if (mobileMenu && menuIconContainer) {
    mobileMenu.classList.toggle('hidden');
    if (!mobileMenu.classList.contains('hidden')) {
      document.body.style.overflow = 'hidden';
    } else {
      document.body.style.overflow = '';
    }
    const isExpanded = menuButton.getAttribute('aria-expanded') === 'true';
    menuButton.setAttribute('aria-expanded', (!isExpanded).toString());
    menuIconContainer.innerHTML = isExpanded ? astroMenuIconSvg : astroCloseIconSvg;
  }
}

// Función para inicializar el botón del menú móvil
function initMobileMenuButton() {
  const menuButton = document.getElementById('mobile-menu-button');
  
  if (menuButton) {
    // Eliminar cualquier event listener existente para evitar duplicados
    menuButton.removeEventListener('click', handleMobileMenuButtonClick);
    menuButton.removeEventListener('touchstart', handleMobileMenuButtonClick);
    
    // Agregar event listeners para clic y toque
    menuButton.addEventListener('click', handleMobileMenuButtonClick);
    menuButton.addEventListener('touchstart', handleMobileMenuButtonClick, { passive: true });
  }
}

// Inicializar cuando el DOM esté listo
document.addEventListener('DOMContentLoaded', initMobileMenuButton);

// Volver a inicializar cuando cambie el contenido de la página (navegación entre secciones)
document.addEventListener('astro:page-load', initMobileMenuButton);
document.addEventListener('astro:after-swap', initMobileMenuButton);

// Asegurarse de que el botón funcione incluso si se carga dinámicamente
if (document.readyState === 'complete' || document.readyState === 'interactive') {
  setTimeout(initMobileMenuButton, 100);
}
</script>
