---
import RecipeCardCarousel from './RecipeCardCarousel.astro';

export interface Props {
  recipes: any[];
  title?: string;
  description?: string;
  textButton?: string;
}

const { 
  recipes = [],
  title = 'DESCUBRE NUESTRAS DELICIOSAS',
  description = 'RECETAS',
  textButton = 'Ver Todas'
} = Astro.props;

// Obtener el idioma actual de la URL
const currentLang = Astro.url.pathname.split('/')[1] === 'es' ? 'es' : 'en';

// Asegurarse de que recipes es un array
const recipeItems = Array.isArray(recipes) ? recipes : [];

// Para desktop: mostrar siempre 3 tarjetas, pero el carousel avanza de 1 en 1
// Para mobile: mantener 1 por slide
const mobileGroups = [];
for (let i = 0; i < recipeItems.length; i += 1) {
  mobileGroups.push([recipeItems[i]]);
}
---

<div class="w-full ">
  <div class="w-full px-4 ">
    <!-- Título alineado a la izquierda -->
    
    <!-- Seccion de recetas -->
    
    <!-- Botones de filtro -->
    <div class="flex gap-2.5 mb-8 px-4 md:px-0 justify-center">
      <a href="#" class="flex py-5 px-2.5 justify-center items-center gap-2.5 flex-1 rounded-full border border-brown bg-yellow font-bold text-brown hover:bg-yellow-400 transition-colors">
        DESAYUNO
      </a>
      <a href="#" class="flex py-5 px-2.5 justify-center items-center gap-2.5 flex-1 rounded-full border border-brown bg-yellow font-bold text-brown hover:bg-yellow-400 transition-colors">
        BRUNCH
      </a>
      <a href="#" class="flex py-5 px-2.5 justify-center items-center gap-2.5 flex-1 rounded-full border border-brown bg-yellow font-bold text-brown hover:bg-yellow-400 transition-colors">
        ALMUERZO
      </a>
      <a href="#" class="flex py-5 px-2.5 justify-center items-center gap-2.5 flex-1 rounded-full border border-brown bg-yellow font-bold text-brown hover:bg-yellow-400 transition-colors">
        TODO
      </a>
    </div>
     
    <!-- Carousel de recetas - MOBILE (1 por slide) - Solo visible en mobile -->
    <div class="recipes-carousel relative md:hidden">
      <div class="recipes-carousel-container w-full  md:py-12 py-6 md:px-12 px-4">
        <div class="recipes-carousel-track flex transition-transform duration-300 " id="recipesTrackMobile">
          {mobileGroups.map((group, index) => (
            <div class="recipe-slide-group w-full flex-shrink-0 flex justify-center ">
              {group.map((recipe, recipeIndex) => (
                <div class="recipe-slide w-full max-w-sm mx-4">
                  <RecipeCardCarousel
                    image={recipe.image}
                    hoverImage={recipe.hover_image || recipe.image}
                    title={recipe.title}
                    time={`${recipe.preparation_time}MIN`}
                    id={recipe.id}
                    difficulty={recipe.difficulty || '---'}
                    servings={recipe.servings || 0}
                    rating={recipe.rating || 0}
                    isMainCard={false}
                  />
                </div>
              ))}
            </div>
          ))}
        </div>
      </div>
      
      <!-- Controles de navegación mobile (flechas y puntos en la parte inferior) -->
      <div class="flex justify-center items-center gap-4 mt-6">
        <!-- Flecha anterior -->
        <button class="carousel-prev bg-white text-primary p-2 rounded-full shadow-lg z-10" aria-label="Anterior" id="prevBtnMobile">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </button>
        
        <!-- Puntos indicadores -->
        <div class="carousel-dots-mobile flex gap-2"></div>
        
        <!-- Flecha siguiente -->
        <button class="carousel-next bg-white text-primary p-2 rounded-full shadow-lg z-10" aria-label="Siguiente" id="nextBtnMobile">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </button>
      </div>
    </div>
    
    <!-- Carousel de recetas - DESKTOP - Solo visible en desktop -->
    <div class="recipes-carousel relative hidden md:block">
      <div class="recipes-carousel-container overflow-hidden ">
        <div class="recipes-carousel-track flex justify-between items-start w-full transition-transform duration-300" id="recipesTrackDesktop" style="transform: translateX(0);">
          {recipeItems.map((recipe, index) => (
            <div class="recipe-slide flex-shrink-0" data-index={index}>
              <RecipeCardCarousel
                image={recipe.image}
                hoverImage={recipe.hover_image || recipe.image}
                title={recipe.title}
                time={`${recipe.preparation_time}MIN`}
                id={recipe.id}
                difficulty={recipe.difficulty || '---'}
                servings={recipe.servings || 0}
                rating={recipe.rating || 0}
                isMainCard={false}
              />
            </div>
          ))}
        </div>
      </div>
      
      <!-- Controles de navegación desktop (flechas y puntos en la parte inferior) -->
      <div class="flex justify-center items-center gap-4 mt-8">
        <!-- Flecha anterior -->
        <button class="carousel-prev bg-white text-primary p-2 rounded-full shadow-lg z-10" aria-label="Anterior" id="prevBtnDesktop">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </button>
        
        <!-- Puntos indicadores -->
        <div class="carousel-dots-desktop flex gap-2"></div>
        
        <!-- Flecha siguiente -->
        <button class="carousel-next bg-white text-primary p-2 rounded-full shadow-lg z-10" aria-label="Siguiente" id="nextBtnDesktop">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </button>
      </div>
    </div>
    
    <!-- Botón "Ver Todas" - Visible en ambos modes -->
    <div class="flex justify-center mt-6 w-full px-4 md:px-0">
      <a href={`/${currentLang === 'es' ? 'es/recetas' : 'en/recipes'}`} class="bg-white text-primary font-bold py-2 px-8 rounded-full hover:bg-gray-100 transition-colors w-full md:w-auto text-center">
        {textButton}
      </a>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Configuración para el carrusel mobile
    setupMobileCarousel();

    // Configuración para el carrusel desktop
    setupDesktopCarousel();

    // Función para configurar el carrusel mobile
    function setupMobileCarousel() {
      const track = document.getElementById('recipesTrackMobile');
      const prevBtn = document.getElementById('prevBtnMobile');
      const nextBtn = document.getElementById('nextBtnMobile');
      const dotsContainer = document.querySelector('.carousel-dots-mobile');

      if (!track || !prevBtn || !nextBtn || !dotsContainer) return;

      const slideGroups = track.querySelectorAll('.recipe-slide-group');
      const totalGroups = slideGroups.length;
      let currentGroup = 0;

      // Crear indicadores de puntos
      createDots();

      // Actualizar el estado inicial
      updatePosition();

      // Botón anterior
      prevBtn.addEventListener('click', () => {
        if (currentGroup > 0) {
          currentGroup--;
          updatePosition();
        }
      });

      // Botón siguiente
      nextBtn.addEventListener('click', () => {
        if (currentGroup < totalGroups - 1) {
          currentGroup++;
          updatePosition();
        }
      });

      // Crear indicadores
      function createDots() {
        dotsContainer.innerHTML = '';
        
        for (let i = 0; i < totalGroups; i++) {
          const dot = document.createElement('button');
          dot.classList.add(
            'w-3', 'h-3', 'rounded-full', 
            i === currentGroup ? 'bg-white' : 'bg-gray-300'
          );
          dot.addEventListener('click', () => {
            currentGroup = i;
            updatePosition();
          });
          dotsContainer.appendChild(dot);
        }
      }

      // Actualizar posición del carrusel
      function updatePosition() {
        // Mover el track
        track.style.transform = `translateX(-${currentGroup * 100}%)`;
        
        // Actualizar dots
        const dots = dotsContainer.querySelectorAll('button');
        dots.forEach((dot, i) => {
          if (i === currentGroup) {
            dot.classList.remove('bg-gray-300');
            dot.classList.add('bg-white');
          } else {
            dot.classList.remove('bg-white');
            dot.classList.add('bg-gray-300');
          }
        });

        // Habilitar/deshabilitar botones según la posición
        prevBtn.classList.toggle('opacity-50', currentGroup === 0);
        nextBtn.classList.toggle('opacity-50', currentGroup === totalGroups - 1);
      }
    }

    // Función para configurar el carrusel desktop
    function setupDesktopCarousel() {
      const track = document.getElementById('recipesTrackDesktop');
      const prevBtn = document.getElementById('prevBtnDesktop');
      const nextBtn = document.getElementById('nextBtnDesktop');
      const dotsContainer = document.querySelector('.carousel-dots-desktop');

      if (!track || !prevBtn || !nextBtn || !dotsContainer) return;

      const slides = track.querySelectorAll('.recipe-slide');
      const totalSlides = slides.length;
      let currentSlide = 0;

      // Establecer posición inicial - mostrar 3 slides empezando desde el slide 0
      updateDesktopCarousel();

      // Crear indicadores de puntos
      createDesktopDots();

      // Botón anterior
      prevBtn.addEventListener('click', () => {
        if (currentSlide > 0) {
          currentSlide--;
          updateDesktopCarousel();
        }
      });

      // Botón siguiente
      nextBtn.addEventListener('click', () => {
        if (currentSlide < totalSlides - 3) {
          currentSlide++;
          updateDesktopCarousel();
        }
      });

      // Crear indicadores para desktop
      function createDesktopDots() {
        dotsContainer.innerHTML = '';
        
        const totalDots = Math.max(0, totalSlides - 2); // totalSlides - 3 + 1
        
        for (let i = 0; i < totalDots; i++) {
          const dot = document.createElement('button');
          dot.classList.add(
            'w-3', 'h-3', 'rounded-full', 
            i === currentSlide ? 'bg-white' : 'bg-gray-300'
          );
          dot.addEventListener('click', () => {
            currentSlide = i;
            updateDesktopCarousel();
          });
          dotsContainer.appendChild(dot);
        }
      }

      // Actualizar carrusel desktop
      function updateDesktopCarousel() {
        // Resetear todas las tarjetas
        slides.forEach((slide, index) => {
          const card = slide.querySelector('a');
          if (card) {
            // Resetear clases
            card.className = 'block group relative transition-all duration-500 ease-in-out flex-shrink-0 w-[310px] h-[562px]';
            
            // Actualizar el componente interno
            const cardContainer = card.querySelector('div');
            const imgContainer = cardContainer?.querySelector('div[class*="rounded-t-"]'); // Buscar específicamente el contenedor de imagen
            const infoContainer = cardContainer?.querySelector('div[class*="bg-[#F8E31F]"]'); // Buscar específicamente el contenedor de info
            const title = card.querySelector('h3');
            
            if (index === currentSlide) {
              // Tarjeta principal (primera visible)
              card.className = 'block group relative transition-all duration-500 ease-in-out flex-shrink-0 w-[530px] h-[562px]';
              
              // Remover overlay si existe
              const existingOverlay = cardContainer.querySelector('.absolute.inset-0');
              if (existingOverlay) {
                existingOverlay.remove();
              }
              
              if (cardContainer) {
                cardContainer.className = 'flex flex-col w-[530px] h-[562px] relative';
              }
              if (imgContainer) {
                imgContainer.className = 'relative overflow-hidden flex-shrink-0 w-[530px] h-[300px] rounded-t-[30px] border-t border-r border-l border-[#388BFF]';
              }
              if (infoContainer) {
                infoContainer.className = 'flex-shrink-0 w-[530px] h-[262px] bg-[#F8E31F] rounded-b-[30px] border-r border-b border-l border-black border-opacity-50 p-6 flex flex-col justify-between';
              }
              if (title) {
                title.className = 'font-sans font-bold text-black leading-tight flex-1 flex items-center text-2xl';
              }
            } else {
              // Tarjetas secundarias
              if (cardContainer) {
                cardContainer.className = 'flex flex-col w-[310px] h-[562px] relative';
                
                // Agregar overlay si no existe
                let overlay = cardContainer.querySelector('.absolute.inset-0');
                if (!overlay) {
                  overlay = document.createElement('div');
                  overlay.className = 'absolute inset-0 bg-[#0A0A0A40] z-10 rounded-[30px]';
                  cardContainer.insertBefore(overlay, cardContainer.firstChild);
                }
              }
              if (imgContainer) {
                imgContainer.className = 'relative overflow-hidden flex-shrink-0 w-[310px] h-[300px] rounded-t-[30px] border-t border-r border-l border-black border-opacity-50';
              }
              if (infoContainer) {
                infoContainer.className = 'flex-shrink-0 w-[310px] h-[262px] bg-[#F8E31F] rounded-b-[30px] border border-black border-opacity-50 p-6 flex flex-col justify-between';
              }
              if (title) {
                title.className = 'font-sans font-bold text-black leading-tight flex-1 flex items-center text-lg';
              }
            }
          }
          
          // Mostrar/ocultar slides
          if (index >= currentSlide && index < currentSlide + 3) {
            slide.style.display = 'block';
          } else {
            slide.style.display = 'none';
          }
        });
        
        // Actualizar dots
        const dots = dotsContainer.querySelectorAll('button');
        dots.forEach((dot, i) => {
          if (i === currentSlide) {
            dot.classList.remove('bg-gray-300');
            dot.classList.add('bg-white');
          } else {
            dot.classList.remove('bg-white');
            dot.classList.add('bg-gray-300');
          }
        });

        // Habilitar/deshabilitar botones
        prevBtn.classList.toggle('opacity-50', currentSlide === 0);
        nextBtn.classList.toggle('opacity-50', currentSlide >= totalSlides - 3);
      }
    }
  });
</script>
