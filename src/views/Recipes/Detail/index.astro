---
// src/views/Recipes/Detail/index.astro
import { getLocale } from '../../../i18n/i18n';
import './styles.css';
import RecipeCard from '../../../components/recipes/RecipeCard.astro';
import RelatedRecipesCarousel from '../../../components/recipes/RelatedRecipesCarousel.astro';
import Breadcrumb from '../../../components/common/Breadcrumb/Breadcrumb.astro';

interface RecipeItem {
  id: string;
  title: string;
  description: string;
  ingredients: string[];
  instructions: string[];
  preparation_time: number;
  servings: number;
  image?: string;
  tags?: string[];
  product_image?: string;
}

const { currentLang, recipeId } = Astro.props;

// Import all recipe files with static glob and filter by language
const recipeModules = import.meta.glob<{ default: RecipeItem }>("../../../locales/*/recipes/*.json");
const allRecipes: RecipeItem[] = [];
for (const path in recipeModules) {
  const lang = path.split('/') [4];
  if (lang === currentLang) {
    const mod = await recipeModules[path]();
    allRecipes.push(mod.default);
  }
}

// Find current recipe
const recipe = allRecipes.find((item: RecipeItem) => item.id === recipeId);

// Get related recipes (filter current and limit to 3)
const relatedRecipes = allRecipes
  .filter((item: RecipeItem) => item.id !== recipeId)
  .slice(0, 3);

if (!recipe) {
  throw new Error(`Recipe with id ${recipeId} not found`);
}

// Load shared recipe assets (titles, labels etc)
const recipesAssets = {
  recipes: currentLang === 'es' ? 'Ingredientes' : 'Ingredients',
  preparation: currentLang === 'es' ? 'Preparación' : 'Preparation',
  related_recipes: currentLang === 'es' ? 'Recetas relacionadas' : 'Related recipes'
};

function formatTime(minutes: number): string {
  const hours = Math.floor(minutes / 60);
  const mins = minutes % 60;
  
  if (currentLang === 'es') {
    return hours > 0 
      ? `${hours}h ${mins}min` 
      : `${mins}min`;
  } else {
    return hours > 0 
      ? `${hours}h ${mins}m` 
      : `${mins}m`;
  }
}
---
<div style="background-image: url('https://snack.yummiespromociones.com/SnacksyummiesAssets/bgcontactzibas.webp'); background-size: cover; background-position: center; background-repeat: no-repeat;">
  <div class="w-full max-w-6xl mx-auto px-4 pt-4">
    <Breadcrumb bgColor="bg-transparent" textColor="text-white" hoverColor="hover:text-white" />
  </div>
<div id="hero" class="flex flex-col pt-8 md:pt-12 md:flex-row justify-center items-center md:h-[43rem] pb-8" transition:animate="slide">
  <div class="w-full max-w-6xl flex flex-col md:flex-row items-center justify-center gap-8">
    {recipe.image && (
      <div class="w-full md:w-1/2 flex justify-center">
        <div class="relative rounded-lg overflow-hidden h-80 lg:h-96 w-80 max-w-lg">
          <img 
            src={recipe.image} 
            alt={recipe.title}
            class="w-full h-full object-cover"
            onerror="this.onerror=null;this.src='/images/recipes/placeholder.jpg';"
            transition:name={`recipe-image-${recipe.id}`}
          />
        </div>
      </div>
    )}
    
    <div class="w-[80%] md:w-1/2 flex flex-col gap-4 bg-white md:p-8 p-4 rounded-lg">
      <h1 class=" font-heading md:text-3xl text-2xl font-bold text-gray-800 mb-2 text-center md:text-left">{recipe.title}</h1>
      <div class="flex items-center justify-center md:justify-start">
        <svg 
          xmlns="http://www.w3.org/2000/svg" 
          class="h-5 w-5 md:h-6 md:w-6 text-gray-500" 
          fill="none" 
          viewBox="0 0 24 24" 
          stroke="currentColor"
        >
          <path 
            stroke-linecap="round" 
            stroke-linejoin="round" 
            stroke-width="2" 
            d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" 
          />
        </svg>
        <span class="ml-2 md:ml-5 text-gray-500 font-heading text-base md:text-xl">
          {formatTime(recipe.preparation_time)}
        </span>
      </div>
    </div>
  </div>
</div>
<div id="ingredients" class=" flex flex-col justify-center items-center    mb-8 py-16 ">
  <div class="w-full max-w-6xl px-4">
    <h1 class="font-heading font-bold md:text-4xl text-2xl text-white text-center mb-8 ">
      {recipesAssets.recipes}
    </h1>
    
    <div class="flex flex-col md:flex-row items-center justify-center gap-8">
      {recipe.image && (
        <div class="w-full md:w-1/2 flex justify-center">
          <div class="relative rounded-lg overflow-hidden h-80 lg:h-96 w-80 max-w-lg">
            <img 
              src={recipe.product_image} 
              alt={recipe.title}
              class="w-full h-full object-cover"
              onerror="this.onerror=null;this.src='/images/recipes/placeholder.jpg';"
            />
          </div>
        </div>
      )}
      
      <div class="w-[80%] md:w-1/2 flex flex-col gap-4 md:p-8 p-4 rounded-lg text-white">
       
        <section class="mb-8 text-white">
          <ul class="list-disc list-inside space-y-2 text-white">
            {recipe.ingredients.map((ingredient: string) => (
              <li class="text-white">
                {ingredient}
              </li>
            ))}
          </ul>
        </section>
      </div>
    </div>
  </div>
</div>

<div id="instructions" class="mt-[-2rem]  md:mt-[-2rem] flex flex-col md:flex-row justify-center items-center md:h-[43rem] mb-8">

  <div class="w-full max-w-6xl flex flex-col md:flex-row items-center justify-center gap-8">
    <div class="w-[80%]  flex items-center justify-center flex-col gap-4  md:p-0 p-4 rounded-lg text-white">
      <h1 class="font-heading font-bold md:text-4xl text-2xl text-gray-600 text-center mb-8">
        {recipesAssets.preparation}
      </h1>
      <section class="mb-8 text-white">
        <ul class="list-disc list-inside space-y-2 text-gray-600">
          {recipe.instructions.map((instruction: string) => (
            <li class="text-gray-600">
              {instruction}
            </li>
          ))}
        </ul>
      </section>
    </div>
  </div>
</div>
<div id="suggestions_related" class="mt-[-2rem] flex flex-col justify-center items-center py-12 " transition:animate="fade">
  <div class="w-full max-w-6xl px-4">
    <h2 class="pb-8 text-3xl md:text-4xl font-bold text-gray-600 mb-8 text-center font-heading">
      {recipesAssets.related_recipes}
    </h2>
    <!-- Carousel reutilizable con la lista de recetas sugeridas (usa RecipeCard) -->
    <div class="w-full">
      {relatedRecipes.length > 0 && (
        <RelatedRecipesCarousel items={relatedRecipes} />
      )}
    </div>
  </div>
</div>


<!-- Close background wrapper -->
</div>

<script>
  // Este script se ejecuta solo en el navegador
  document.addEventListener('DOMContentLoaded', () => {
    // Manejo de imágenes que fallan al cargar
    document.querySelectorAll('.recipe-detail img').forEach(img => {
      if (!img.hasAttribute('onerror')) {
        img.addEventListener('error', function(this: HTMLImageElement) {
          this.onerror = null;
          this.src = '/images/recipes/placeholder.jpg';
        });
      }
    });
  });
</script>
